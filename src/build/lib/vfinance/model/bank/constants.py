# -*- coding: utf-8 -*-
"""
A Fulfillment Type is the type of an entry in the Accounting Database.

Each entry in the accounting database generated by V-Finance receives
a fulfillment type to be able to track it origins

The key refers to the booking type, as defined in the 'transactions'
"""

from collections import namedtuple

# never change this value, as it will invalidate all existing data !
hypo_feature_offset = 10000

index_url_types = [(None, None),
                   (1,    'belgostat')]

sexes = [('m', 'man'), ('v', 'vrouw')]

period_types = [(0,  'single'), 
                (1,  'monthly'), 
                (3,  'quarterly'),
                (6,  'semesterly'),
                (12, 'yearly')]

# These correspond to the insurance and loan operations in the documentation
fulfillment_types = [
    # for the financial module
                     (1,  'sales'), 
                     (2,  'depot_movement'), 
                     (3,  'premium_attribution'),
                     (7,  'security_quotation'),
                     (8,  'redemption_attribution'),
                     (10, 'capital_redemption_deduction'),
                     (15, 'financed_commissions_activation'),
                     (16, 'financed_commissions_distribution'),
                     (17, 'financed_commissions_write_off'),
                     (18, 'financed_commissions_deduction'),
                     (19, 'fund_attribution'),
                     (20, 'risk_sales'),
                     (21, 'risk_deduction'),
                     (22, 'interest_attribution'),
                     (23, 'redemption'),
                     (24, 'financed_commissions_redemption'),
                     (25, 'financed_commissions_redemption_deduction'),
                     (26, 'switch_out'),
                     (27, 'switch_deduction'),
                     (28, 'switch_attribution'),
                     (29, 'financed_switch'),
                     (30, 'funded_premium_activation'),
                     (32, 'additional_interest_attribution'),
                     (33, 'interest_redemption_deduction'),
                     (34, 'additional_interest_redemption_deduction'),
                     (35, 'profit_attribution'),
                     (37, 'sundry'),
                     (38, 'sales_distribution'),
                     (39, 'funded_premium_distribution'),
    # for the mortgage module
                     (10001, 'completion'),
                     (10002, 'repayment'),
                     (10003, 'reminder'),
                     (10004, 'repayment_reminder'),
                     (10005, 'reservation'),
                     (10006, 'payment'),
                     ]

#                                      id                   name                   group    custom_clause, exclusive 
bank_functional_settings_by_group = [ (1001, 'direct_debit_batch_1',   'direct_debit_batch',  False,         True),
                                      (1002, 'direct_debit_batch_2',   'direct_debit_batch',  False,         True),
                                      (1003, 'direct_debit_batch_3',   'direct_debit_batch',  False,         True),
                                      (1004, 'direct_debit_batch_4',   'direct_debit_batch',  False,         True),
                                      (1005, 'direct_debit_batch_5',   'direct_debit_batch',  False,         True),
                                      (1006, 'direct_debit_batch_6',   'direct_debit_batch',  False,         True),
                                      (1007, 'direct_debit_batch_7',   'direct_debit_batch',  False,         True),
                                      (1008, 'direct_debit_batch_8',   'direct_debit_batch',  False,         True),
                                      (1009, 'direct_debit_batch_9',   'direct_debit_batch',  False,         True),
                                      (1010, 'direct_debit_batch_10',  'direct_debit_batch',  False,         True), ]

functional_settings = [(number, name) for number, name, _group, _custom_clause, _exclusive in bank_functional_settings_by_group]

product_statuses = [ (1, 'draft'),
                     (2, 'complete'),
                     (3, 'active'),
                     (4, 'verified'),
                     (5, 'incomplete'), 
                     (6, 'canceled'), ]

direct_debit_types = [(1, 'core'), (2, 'b2b'), (3, 'local')]

direct_debit_batch_statuses = [(1, 'draft'),
                               (2, 'complete'),
                               (3, 'verified'),
                               (4, 'incomplete'),
                               (5, 'canceled'),
                               (6, 'closed')
                               ]

direct_debit_sequence_types = [(1, 'FRST'),
                               (2, 'RCUR'),
                               (3, 'FNAL'),
                               (4, 'OOFF'),
                               (5, 'RPRE'),
                               ]

bank_account_types = [(1, 'local'),
                      (2, 'sepa'),
                      ]

invoice_item_states = [(1, 'to_send'),
                       (2, 'send'),
                       (3, 'canceled'),
                       ]


role_features = [(10001, 'company_coverage_limit'),
                 (10002, 'person_coverage_limit'),
                 (10003, 'monthly_loan_repayments')
                 ]

role_feature_names = set(rf[1] for rf in role_features)

direct_debit_result_types = [(1, 'pending'),
                             (2, 'rejected'),
                             (3, 'accepted'),
                             ]

commission_receivers = [(1, 'master_broker'),
                        (2, 'broker'),
                        (3, 'agent'),
                        (4, 'company') ]

investment_account_types = [
    (  1, 'capital_revenue'), 
    (  2, 'provisions'), 
    (  3, 'provisions_cost'), 
    (  4, 'taxes'), 
    (  5, 'premium_rate_1_revenue'), 
    (  6, 'entry_fee_revenue'), 
    (  7, 'premium_fee_1_revenue'), 
    (  8, 'pending_premiums'), 
    (  9, 'financed_commissions_revenue'),
    ( 10, 'financed_commissions_cost'),
    ( 11, 'financed_commissions_deduction_revenue'),
    ( 12, 'funded_premium_attribution_cost'), 
    ( 13, 'funded_premium_attribution_revenue'),
    ( 14, 'funded_premium'),
    ( 15, 'funded_premium_cost'),
    ( 16, 'quotation_cost'), 
    ( 17, 'quotation_revenue'),
    ( 18, 'financed_commissions_deduction_cost'), 
    ( 19, 'financed_commissions_interest'),
    ( 20, 'risk_revenue'), 
    ( 21, 'risk_deduction_cost'), 
    ( 22, 'risk_deduction_revenue'), 
    ( 23, 'redemption_revenue'), 
    ( 24, 'redemption_cost'),
    ( 25, 'redemption_rate_revenue'), 
    ( 26, 'redemption_fee_revenue'),
    ( 27, 'effective_interest_tax'), 
    ( 28, 'fictive_interest_tax'),
    ( 29, 'switch_deduction_revenue'), 
    ( 30, 'switch_deduction_cost'),
    ( 31, 'switch_revenue'), 
    ( 32, 'interest_cost'), 
    ( 33, 'additional_interest_cost'),
    ( 34, 'capital_cost'), 
    ( 35, 'premium_rate_2_revenue'), 
    ( 36, 'premium_fee_2_revenue'), 
    ( 37, 'premium_rate_3_revenue'), 
    ( 38, 'premium_fee_3_revenue'), 
    ( 39, 'premium_rate_4_revenue'), 
    ( 40, 'premium_fee_4_revenue'), 
    ( 41, 'distributed_medical_fee_revenue'),
    ( 42, 'premium_rate_5_revenue'), 
    ( 43, 'profit_attribution_revenue'),
    ( 44, 'profit_attribution_cost'),
    ( 45, 'profit_reserve'),
    ( 46, 'market_fluctuation_revenue'),
    ( 47, 'premium_rate_1_cost_broker'),
    ( 48, 'premium_fee_1_cost_broker'),
    ( 49, 'premium_rate_2_cost_broker'),
    ( 50, 'premium_fee_2_cost_broker'),
    ( 51, 'premium_rate_3_cost_broker'),
    ( 52, 'premium_fee_3_cost_broker'),
    ( 53, 'premium_rate_4_cost_broker'),
    ( 54, 'premium_fee_4_cost_broker'),
    ( 55, 'premium_rate_5_cost_broker'),
    ( 56, 'premium_fee_5_cost_broker'),
    ( 57, 'entry_fee_cost_broker'),
    ( 58, 'premium_fee_1_revenue_master_broker'),
    ( 59, 'premium_fee_1_revenue_broker'),
    ( 60, 'premium_fee_1_revenue_agent'),
    ( 61, 'premium_rate_1_revenue_master_broker'),
    ( 62, 'premium_rate_1_revenue_broker'),
    ( 63, 'premium_rate_1_revenue_agent'),
    ( 64, 'premium_fee_2_revenue_master_broker'),
    ( 65, 'premium_fee_2_revenue_broker'),
    ( 66, 'premium_fee_2_revenue_agent'),
    ( 67, 'premium_rate_2_revenue_master_broker'),
    ( 68, 'premium_rate_2_revenue_broker'),
    ( 69, 'premium_rate_2_revenue_agent'),
    ( 70, 'premium_fee_3_revenue_master_broker'),
    ( 71, 'premium_fee_3_revenue_broker'),
    ( 72, 'premium_fee_3_revenue_agent'),
    ( 73, 'premium_rate_3_revenue_master_broker'),
    ( 74, 'premium_rate_3_revenue_broker'),
    ( 75, 'premium_rate_3_revenue_agent'),
    ( 76, 'premium_fee_4_revenue_master_broker'),
    ( 77, 'premium_fee_4_revenue_broker'),
    ( 78, 'premium_fee_4_revenue_agent'),
    ( 79, 'premium_rate_4_revenue_master_broker'),
    ( 80, 'premium_rate_4_revenue_broker'),
    ( 81, 'premium_rate_4_revenue_agent'),
    ( 82, 'premium_fee_5_revenue_master_broker'),
    ( 83, 'premium_fee_5_revenue_broker'),
    ( 84, 'premium_fee_5_revenue_agent'),
    ( 85, 'premium_rate_5_revenue_master_broker'),
    ( 86, 'premium_rate_5_revenue_broker'),
    ( 87, 'premium_rate_5_revenue_agent'),
    ( 88, 'entry_fee_revenue_master_broker'),
    ( 89, 'entry_fee_revenue_broker'),
    ( 90, 'entry_fee_revenue_agent'),
    ( 91, 'financed_commissions_revenue_master_broker'),
    ( 92, 'financed_commissions_revenue_broker'),
    ( 93, 'financed_commissions_revenue_agent'),
    ( 94, 'funded_premium_master_broker'),
    ( 95, 'funded_premium_broker'),
    ( 96, 'funded_premium_agent'),
    ( 97, 'financed_commissions_cost_master_broker'),
    ( 98, 'financed_commissions_cost_broker'),
    ( 99, 'financed_commissions_cost_agent'),
    (100, 'premium_rate_1_cost_master_broker'),
    (101, 'premium_fee_1_cost_master_broker'),
    (102, 'premium_rate_2_cost_master_broker'),
    (103, 'premium_fee_2_cost_master_broker'),
    (104, 'premium_rate_3_cost_master_broker'),
    (105, 'premium_fee_3_cost_master_broker'),
    (106, 'premium_rate_4_cost_master_broker'),
    (107, 'premium_fee_4_cost_master_broker'),
    (108, 'premium_rate_5_cost_master_broker'),
    (109, 'premium_fee_5_cost_master_broker'),
    (110, 'entry_fee_cost_master_broker'),
    (111, 'premium_rate_1_cost_agent'),
    (112, 'premium_fee_1_cost_agent'),
    (113, 'premium_rate_2_cost_agent'),
    (114, 'premium_fee_2_cost_agent'),
    (115, 'premium_rate_3_cost_agent'),
    (116, 'premium_fee_3_cost_agent'),
    (117, 'premium_rate_4_cost_agent'),
    (118, 'premium_fee_4_cost_agent'),
    (119, 'premium_rate_5_cost_agent'),
    (120, 'premium_fee_5_cost_agent'),
    (121, 'entry_fee_cost_agent'),
]

loan_account_types = [
    (hypo_feature_offset + 1,  'wederbeleggingsvergoeding',               '700128'),
    (hypo_feature_offset + 2,  'nalatigheidsintresten',                   '700124'),
    (hypo_feature_offset + 3,  'rappelkosten',                            '740105'),
    (hypo_feature_offset + 4,  'gerechtskosten',                          '740107'),
    (hypo_feature_offset + 5,  'schadevergoeding',                        '740106'),
    (hypo_feature_offset + 6,  'korting_pret_jeunes',                     '416730'),
    (hypo_feature_offset + 7,  'dossierkosten',                           '740100'),
    (hypo_feature_offset + 8,  'schattingskosten',                        '740101'),
    (hypo_feature_offset + 9,  'ontvangen_voorschot',                     '426000'),
    (hypo_feature_offset + 10, 'rente',                                   '700110'),
    (hypo_feature_offset + 11, 'korting_per_aflossing',                   '708122'),
    (hypo_feature_offset + 12, 'korting_per_jaar',                        '708122'),
    (hypo_feature_offset + 13, 'principal_commission_cost',               '62332'),
    (hypo_feature_offset + 14, 'principal_commission_cost_master_broker', '6233201'),
    (hypo_feature_offset + 15, 'principal_commission_cost_broker',        '6233202'),
    (hypo_feature_offset + 16, 'principal_commission_cost_agent',         '6233203'),
    ]

account_types = investment_account_types + [(i, name) for i, name, _default in loan_account_types]
account_types.sort(key=lambda x:x[1])
account_type_keys = set(account_type[1] for account_type in account_types)

#         name                                        suffix    trans  desc
insurance_features = [
    (1,   'interest_rate',                            '%',      False, 'Vaste jaarlijkse intrest voet'), 
    (2,   'entry_fee',                                'Euro',   False, 'Eenmalige instapkost bij openen rekening'),
    (3,   'management_fee',                           'Euro',   False, 'Jaarlijkse beheerskost'),
    (4,   'redemption_rate',                          '%',      True,  'Variabele uitstapkost<br/>op basis van de reserve'),
    (8,   'premium_taxation_physical_person',         '%',      False, 'Belastingspercentage voor natuurlijke personen'),
    (9,   'premium_taxation_legal_person',            '%',      False, 'Belastingspercentage voor fysieke personen'),
    (10,  'premium_fee_1',                            'Euro',   False, 'Vaste kost afgehouden per premie'),
    (11,  'premium_rate_1',                           '%',      False, 'Variabele kost afgehouden per premie'),
    (12,  'minimum_exit_fee',                         'Euro',   True,  'Minimum uitstapkost'),
    (13,  'monthly_contract_exit_rate_decrease',      '%',      True,  'Maandelijkse vermindering van de variabele uitstapkost<br/> tov de startdatum van het contract'),
    (14,  'monthly_premium_exit_rate_decrease',       '%',      True,  'Maandelijkse vermindering van de variabele uitstapkost<br/> tov de datum van toekenning vd premie'),
    (15,  'minimum_market_adjuster',                  '%',      True,  'Minimaal verschil tussen intrest voet en OLO om market adjustment te activeren'),
    (16,  'maximum_market_adjuster',                  '%',      True,  'Maximale market adjustment wanneer geactiveerd'),
    (17,  'additional_interest_rate',                 '%',      False, 'Variabele jaarlijkse intrest voet'),
    (18,  'fictive_interest_tax_rate',                '%',      True,  'Belastingspercentage voor fictieve intrest'),
    (19,  'effective_interest_tax_rate',              '%',      True,  'Belastingspercentage voor feitelijke intrest voet'),
    (20,  'fictive_interest_rate',                    '%',      True,  'Jaarlijkse fictieve intrest voet'),
    (21,  'maximum_legal_exit_rate',                  '%',      True,  'Wettelijk vastgelegde maximum uitstapkost op<br/>op basis van de bruto afkoopwaarde'),
    (22,  'financed_commissions_rate',                '%',      False, 'Percentage GIT afhouding van premie<br/>op basis van premie na afhouding premie taks'),
    (23,  'cooling_off_period',                       'days',   False, 'Wachttijd na ontvangst premie gedurende<br/>dewelke de klant kan uitstappen'), 
    (24,  'investment_delay',                         'days',   False, 'Wachttijd na ontvangst bevestiging vooraleer<br/>investering doorgaat'), 
    (25,  'insurance_fictive_interest_rate',          '%',      True,  'Fictieve intrest op technische reserve schuldsaldoverzekering'), 
    (26,  'insurance_reduction_non_smoker',           '%',      False, 'Korting op verzekeringsrisico voor niet-rokers'),
    (27,  'insurance_reduction_rate',                 '%',      False, 'Korting op het tarief van de schuldsaldoverzekering'),
    (28,  'insurance_surmortality',                   '%',      False, 'Surmortaliteit'),
    (29,  'insurance_insured_capital_charge',         '%',      False, 'Kost (voor de klant) op het resterend verzekerd kapitaal'),
    # obsolete (use premium_rate_1):
    (30,  'insurance_agent_commision',                '%',      False, 'Commissie voor de makelaar'),
    # obsolete (no longer needed once exact formula implemented):
    (31,  'insurance_minimum_fragmented_premium',     'Euro',   False, 'Bij niet jaarlijkse premies (i.e. maandelijks en per kwartaal)<br/>moet de premie groter of gelijk zijn aan dit bedrag'),
    (32,  'invoicing_period',                         'days',   False, 'Aantal dagen tussen het aanmaken van de factuur en het<br/>moment waarop de premie verschuldigd is'),
    (33,  'direct_debit_period',                      'days',   False, 'Aantal dagen tussen het verschuldigd zijn van een betaling<br/>en de opname van de betaling in een domiciliering'),
    (34,  'direct_debit_investment_delay',            'days',   False, 'Aantal dagen tussen de valuta datum van een gedomicilieerde<br/>premie en de de belegging van de premie'),
    (35,  'premium_administration_fee',               '%',      False, 'Percentage van de gestorte premies dat maandelijks wordt<br/>aangerekend als administratieve kost'),
    (36,  'planned_premium_administration_fee',       '%',      False, 'Percentage van de geplande premies dat maandelijks wordt<br/>aangerekend als administratieve kost'),
    (37,  'funded_premium_rate_1',                    '%',      False, 'Percentage van de premie dat extra toegekend wordt aan de klant<br/>percentage op basis van de premie na afhouding premie taks<br/>(Bonus Allocatie)'),
    (38,  'management_rate',                          '%',      False, 'Percentage van de reserve dat jaarlijks wordt<br/>aangerekend als administratieve kost'),
    (39,  'premium_exit_rate',                        '%',      True,  'Percentage van de premie die wordt aangerekend<br/>als uitstap kost'),
    (40,  'financed_commissions_deduction_rate',      '%',      False, 'Percentage van het totale GIT bedrag dat periodiek wordt aangerekend aan de klant'),
    (41,  'financed_commissions_interest_rate',       '%',      False, 'Periodieke intrest op het openstaande GIT<br/>wordt per periode afgehouden van afschrijving'),
    (42,  'insurance_risk_charge',                    '%',      False, 'Kost (voor de klant) op het risico (i.e. percentage waarmee het risico verhoogd wordt)'),
    (43,  'financed_commissions_periodicity',         'months', False, 'Aantal maanden tussen 2 GIT afschrijvingen'),
    (44,  'insurance_general_risk_reduction',         '%',      False, 'Percentage waarmee alle risico\'s verminderd worden (een algemene korting)'),
    (45,  'insurance_fictitious_extra_age',           'days',   False, 'Aantal dagen die bij iemand z\'n leeftijd geteld worden bij alle risico en premieberekeningen (artificiele veroudering).'),
    (46,  'additional_duration',                      'months', False, 'Aantal maanden dat het contract al liep voor de from date,\n wordt gebruikt voor de bepaling van de waarde van andere features'),
    (47,  'financed_commissions_deduced_interest',    '%',      False, 'Percentage van het aan de klant aangerekende GIT bedrag dat als intrest wordt beschouwd</br>niet samen te gebruiken met financed_commissions_interest_rate'),
    (48,  'maximum_additional_premium_accepted',      'Euro',   False, 'Bijkomende premiestorting die zal worden aanvaard bovenop de <br/>ingeschreven premie'),
    (49,  'direct_debit_delay',                       'months', False, 'Aantal maanden na de ingang van een overeenkomst dat de gedomicilieerde premie begint te lopen'),
    (50,  'financed_commissions_min_redemption_rate', '%',      True,  'Minimum percentage vh openstaande GIT kapitaal dat wordt afgekocht' ),
    (51,  'financed_commissions_max_redemption_rate', '%',      True,  'Maximum percentage vh openstaande GIT kapitaal dat wordt afgekocht' ),
    (52,  'switch_out_fee',                           'Euro',   True,  'Switch out cost as a fixed amount' ),
    (53,  'switch_out_rate',                          '%',      True,  'Switch out cost as a percentage of the switched amount' ),
    (54,  'switch_in_fee',                            'Euro',   True,  'Switch out cost as a fixed amount' ),
    (55,  'switch_in_rate',                           '%',      True,  'Switch out cost as a percentage of the switched amount' ), 
    (56,  'redemption_fee',                           'Euro',   True,  'Fixed redemption cost'),
    (57,  'interest_before_attribution',              'days',   False, 'Number of days interest will be attributed on a premium, before the premium<br/>was attributed tot the account'),
    (58,  'profit_sharing_rate',                      '%',      False, 'Profit sharing'),
    (59,  'premium_fee_2',                            'Euro',   False, 'Vaste kost afgehouden per premie'),
    (60,  'premium_rate_2',                           '%',      False, 'Variabele kost afgehouden per premie'),    
    (61,  'premium_fee_3',                            'Euro',   False, 'Vaste kost afgehouden per premie'),
    (62,  'premium_rate_3',                           '%',      False, 'Variabele kost afgehouden per premie'),
    (63,  'minimum_premium_rate_1',                   'Euro',   False, 'Minimum variabele kost afgehouden per premie'),
    (64,  'maximum_premium_rate_1',                   'Euro',   False, 'Maximum variabele kost afgehouden per premie'),
    (65,  'minimum_premium_rate_2',                   'Euro',   False, 'Minimum variabele kost afgehouden per premie'),
    (66,  'maximum_premium_rate_2',                   'Euro',   False, 'Maximum variabele kost afgehouden per premie'),
    (67,  'minimum_premium_rate_3',                   'Euro',   False, 'Minimum variabele kost afgehouden per premie'),
    (68,  'maximum_premium_rate_3',                   'Euro',   False, 'Maximum variabele kost afgehouden per premie'), 
    (69,  'premium_fee_4',                            'Euro',   False, 'Vaste kost afgehouden per premie'),
    (70,  'premium_rate_4',                           '%',      False, 'Variabele kost afgehouden per premie'),
    (71,  'minimum_premium_rate_4',                   'Euro',   False, 'Minimum variabele kost afgehouden per premie'),
    (72,  'maximum_premium_rate_4',                   'Euro',   False, 'Maximum variabele kost afgehouden per premie'),
    (73,  'distributed_medical_fee',                  'Euro',   False, 'Medical fee which will be distributed over the number of planned premiums'),
    (74,  'insurance_reduction_non_smoker_male',      '%',      False, 'Insurance reduction for non smoking males'),
    (75,  'insurance_reduction_non_smoker_female',    '%',      False, 'Insurance reduction for non smoking females'),
    (76,  'insurance_reduction_smoker_male',          '%',      False, 'Insurance reduction for smoking males'),
    (77,  'insurance_reduction_smoker_female',        '%',      False, 'Insurance reduction for smoking females'),
    (78,  'premium_rate_5',                           '%',      False, 'Variabele kost afgehouden per premie'),
    (79,  'minimum_premium_rate_5',                   'Euro',   False, 'Minimum variabele kost afgehouden per premie'),
    (80,  'maximum_premium_rate_5',                   'Euro',   False, 'Maximum variabele kost afgehouden per premie'),
    (81,  'premium_multiplier',                       '%',      False, 'Percentage waarmee bruto premie verhoogd is na bepaling kosten'), 
    (82,  'minimum_insured_party_age',                'years',  False, 'Minimum leeftijd van de verzekerde persoon bij aanvang contract'),
    (83,  'maximum_insured_party_age',                'years',  False, 'Maximum leeftijd van de verzekerde persoon bij afloop van het contract'),
    (84,  'market_fluctuation_exit_rate',             '%',      True,  'Percentage van de conjunctuurvergoeding dat wordt aangerekend bij afkoop'),
    (85,  'market_fluctuation_reference_duration',    'months', True,  'Referentie looptijd voor bepaling conjunctuurvergoeding'),
    (86,  'market_fluctuation_index_difference',      '%',      True,  'Percentage waarmee de referentie index wordt verminderd voor bepaling conjunctuurvergoeding'),
    (87,  'from_premium_rate_1',                      '%',      False, 'Ondergrens voor de variabele kost'),
    (88,  'thru_premium_rate_1',                      '%',      False, 'Bovengrens voor de variabele kost'),
    (89,  'from_premium_rate_2',                      '%',      False, 'Ondergrens voor de variabele kost'),
    (90,  'thru_premium_rate_2',                      '%',      False, 'Bovengrens voor de variabele kost'),
    (91,  'from_premium_rate_3',                      '%',      False, 'Ondergrens voor de variabele kost'),
    (92,  'thru_premium_rate_3',                      '%',      False, 'Bovengrens voor de variabele kost'),
    (93,  'from_premium_rate_4',                      '%',      False, 'Ondergrens voor de variabele kost'),
    (94,  'thru_premium_rate_4',                      '%',      False, 'Bovengrens voor de variabele kost'),
    (95,  'from_premium_rate_5',                      '%',      False, 'Ondergrens voor de variabele kost'),
    (96,  'thru_premium_rate_5',                      '%',      False, 'Bovengrens voor de variabele kost'),
    (97,  'from_premium_fee_1',                       'Euro',   False, 'Ondergrens voor de vaste kost'),
    (98,  'thru_premium_fee_1',                       'Euro',   False, 'Bovengrens voor de vaste kost'),
    (99,  'from_premium_fee_2',                       'Euro',   False, 'Ondergrens voor de vaste kost'),
    (100, 'thru_premium_fee_2',                       'Euro',   False, 'Bovengrens voor de vaste kost'),
    (101, 'from_premium_fee_3',                       'Euro',   False, 'Ondergrens voor de vaste kost'),
    (102, 'thru_premium_fee_3',                       'Euro',   False, 'Bovengrens voor de vaste kost'),
    (103, 'from_premium_fee_4',                       'Euro',   False, 'Ondergrens voor de vaste kost'),
    (104, 'thru_premium_fee_4',                       'Euro',   False, 'Bovengrens voor de vaste kost'),
    (105, 'from_subscriber_age',                      'years',  False, 'Minimum leeftijd van de verzekerde persoon bij aanvang contract'),
    (106, 'thru_subscriber_age',                      'years',  False, 'Minimum leeftijd van de verzekerde persoon bij aanvang contract'),
    (107, 'min_difference_agreement_from_date',       'days',   False, 'Minimum verschil tussen de agreement en de from date (als dit 1 is moet de from date minstens 1 dag na de agreement_date vallen)'),
    (108, 'max_difference_agreement_from_date',       'days',   False, 'Maximum verschil tussen de agreement en de from date'),
    (109, 'premium_schedule_from_duration',           'months', False, 'Minimum looptijd van het premieschema'),
    (110, 'premium_schedule_thru_duration',           'months', False, 'Maximum looptijd van het premieschema')
    ]

loan_features = [
    (hypo_feature_offset + 1,  'initial_approved_amount',           'Euro',   False, 'Oorspronkelijk goedgekeurd bedrag voor de overname van de lening'),
    (hypo_feature_offset + 2,  'duration_before_start_date',        'days',   False, 'Hoe lang de lening reeds liep voor de overname'),
    (hypo_feature_offset + 3,  'state_guarantee',                   'Euro',   False, 'Bedrag dat gewaarborgd wordt door de overheid'),
    (hypo_feature_offset + 4,  'eerste_herziening',                 'months', False, 'Aantal maanden na dewelke de rente van een lening de eerste maal wordt herzien'),
    (hypo_feature_offset + 5,  'volgende_herzieningen',             'months', False, 'Aantal maanden na dewelke de rente van een lening de wordt herzien'),
    (hypo_feature_offset + 6,  'eerste_herziening_ristorno',        'months', False, 'Aantal maanden na dewelke de ristorno van een lening de eerste maal wordt herzien'),
    (hypo_feature_offset + 7,  'volgende_herzieningen_ristorno',    'months', False, 'Aantal maanden na dewelke de ristorno van een lening wordt herzien'),
    (hypo_feature_offset + 8,  'principal_commission_rate',         '%',      False, 'Commissiepercentage berekend op het ontleend bedrag'),
    (hypo_feature_offset + 9,  'maximum_principal_commission_rate', 'Euro',   False, 'Maximumbedrag van de toegekende commissie op het ontleend bedrag'),
    ]

product_features = insurance_features + loan_features

#
# Warning, don't change these constants, since that would invalidate existing dbs
#
free_feature_offset = 32000
features_per_unit = 5
features_per_unit_buffer = 15
free_features = []
units = ['pct', 'Euro', 'days', 'months']
for i, unit in enumerate(units):
    for j in range( features_per_unit ):
        suffix = unit
        if unit == 'pct':
            suffix = '%'
        feature_name = 'free_%s_%s'%(unit, j+1)
        free_features.append( feature_name )
        product_features.append( (free_feature_offset + i*(features_per_unit+features_per_unit_buffer) + j, 
                                  feature_name,
                                  suffix, 
                                  True,
                                  'Free %s feature %s'%(unit, j+1) ) ) 
product_features.sort( key = lambda pf:pf[1] )

product_features_enumeration = [(pf[0], pf[1]) for pf in product_features]
product_features_suffix = dict((pf[1], pf[2]) for pf in product_features)
product_features_description = dict((pf[1], pf[4]) for pf in product_features)
product_features_upper_threshold = dict((pf[1], {'%':10, 'Euro':100, 'days':62, 'months':3, 'years':200}[pf[2]]) for pf in product_features)
product_features_precision = dict((pf[1], {'%':6, 'Euro':2, 'days':0, 'months':0, 'years':0}[pf[2]]) for pf in product_features)

product_feature_conditions = [
    (  1, 'average_insured_age', 'The average age of the insured parties at the from date of the premium schedule' ),
    (  2, 'insured_male',        'All the insured parties at the from date of the premium schedule are male' ),
    (  3, 'insured_female',      'All the insured parties at the from date of the premium schedule are female' ),
]

product_indexes = [ ( 1, 'market_fluctuation_exit_rate' ),
                    (hypo_feature_offset + 1, 'interest_revision'),
                    ]

educational_levels = [(0,           'no_schooling'),
                      (1,           'incomplete_primary'),
                      (2,           'primary'),
                      (3,           'lower_secondary'),
                      (4,           'upper_secondary'),
                      (5,           'post_secondary'),
                      (6,           'tertiary'),
                      ]


Mail = namedtuple('Mail', ['from_', 'to', 'subject', 'body'])
