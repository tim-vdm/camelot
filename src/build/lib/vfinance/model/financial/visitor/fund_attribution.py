# -*- coding: utf-8 -*-
"""
Created on Tue Dec 21 16:53:08 2010

@author: tw55413
"""

import logging
from decimal import Decimal as D

from camelot.model.authentication import end_of_times

from abstract import FinancialBookingAccount, SecurityBookingAccount
from financed_commission import FinancedCommissionVisitor
from transaction_initiation import TransactionInitiationVisitor
from security_quotation import SecurityQuotationVisitor

LOGGER = logging.getLogger('vfinance.model.financial.visitor.fund_attribution')
#LOGGER.setLevel( logging.DEBUG )

class FundAttributionVisitor(SecurityQuotationVisitor):
   
    dependencies = [FinancedCommissionVisitor, TransactionInitiationVisitor, SecurityQuotationVisitor]
        
    def visit_premium_schedule_at(self, premium_schedule, document_date, book_date, last_visited_document_date):
        LOGGER.debug('visit %s with document date %s and book date %s'%(premium_schedule.full_account_number,
                                                                        document_date,
                                                                        book_date))

        earliest_investment_date = self.get_earliest_investment_date( premium_schedule )
        if earliest_investment_date > book_date:
            LOGGER.debug( 'earliest investment date in future %s'%earliest_investment_date )
            raise StopIteration()
        
        # this doesn't work with multiple funds
        # not specifying a limitation here is a major slowdown of the synchronize
        # process, probably the from date of the run forward should be used
        for security_orders in self.get_premium_security_orders(premium_schedule, document_date, last_visited_document_date):
            LOGGER.debug('%s at %s'%(security_orders.fulfillment_type, security_orders.doc_date))
            
            #
            # Either the order line info is generated by another premium fulfillment, in which case the fund attribution will be associated
            # to this fulfillment, and receive fulfillment type 'fund_attribution'
            #
            # Otherwise, the order line info is the actual source of the transaction (eg a redemption), in this case, the the fund attribution
            # will have no associated fulfillment, and its type will be of the requested type
            #
            quotation = self.get_valid_quotation_at_date( security_orders.fund_distribution.fund, security_orders.doc_date, security_orders.quantity )
            if not quotation:
                LOGGER.debug('no valid quotation found')
                continue
            quotation_date = quotation.from_date
            if quotation_date < earliest_investment_date:
                LOGGER.debug('valid quotation at %s is before earliest investment date %s'%( quotation_date, earliest_investment_date ))
                continue
            if quotation_date > document_date:
                LOGGER.debug('quotation date %s is after document date %s'%(quotation_date, document_date))
                continue
            LOGGER.debug('quotation at %s'%quotation_date)
                    
            if security_orders.associated_to:
                fund_attribution_fulfillment_type = 'fund_attribution'
                total_invested_amount = self.get_total_amount_until(premium_schedule, 
                                                                    thru_document_date = end_of_times(), 
                                                                    thru_book_date = end_of_times(), 
                                                                    fulfillment_type = fund_attribution_fulfillment_type, 
                                                                    account = FinancialBookingAccount( 'fund', security_orders.fund_distribution.fund ),
                                                                    associated_to_id = security_orders.associated_to.fulfillment_id,
                                                                    within_id = security_orders.within_id)
            else:
                fund_attribution_fulfillment_type = security_orders.fulfillment_type
                total_invested_amount = self.get_total_amount_at(premium_schedule, 
                                                                 document_date = quotation_date, 
                                                                 thru_book_date = end_of_times(), 
                                                                 fulfillment_type = fund_attribution_fulfillment_type,
                                                                 within_id = security_orders.within_id,
                                                                 account = FinancialBookingAccount( 'fund', security_orders.fund_distribution.fund ))
            
            if security_orders.order_type == 'amount':
                quantity_invested = total_invested_amount[0] * -1
                investment_treshold = D('0.01')
            else:
                quantity_invested = total_invested_amount[1]
                investment_treshold = D('0.00001')
                
            pending_quantity = (security_orders.quantity or 0) - (quantity_invested or 0)
            
            LOGGER.debug('amount invested : %s'%quantity_invested)
            LOGGER.debug('amount to invest : %s'%security_orders.quantity)
            
            if abs(pending_quantity) >= investment_treshold:
                LOGGER.debug( 'pending quantity %s'%pending_quantity )
                LOGGER.debug( 'pending attribution rate quantity %s'%security_orders.attribution_rate_quantity )
                #
                # We can not sell units we do not have
                #
                available_amount, available_units = self.get_total_amount_until( premium_schedule, 
                                                                                 thru_document_date = self._end_of_times, 
                                                                                 thru_book_date = self._end_of_times, 
                                                                                 account = FinancialBookingAccount( 'fund', security_orders.fund_distribution.fund ) )[:2]
                
                if pending_quantity < 0:
                    if security_orders.order_type == 'amount':
                        pending_quantity = max( pending_quantity, available_amount ) # both are negative
                    else:
                        pending_quantity = max( pending_quantity, -1 * available_units )
                    
                if abs(pending_quantity) >= investment_treshold:
                    
                    #
                    # @todo: attribution rate should be either recalculated, or compared with the
                    # allready subtracted attribution rate, or it risks being subtracted
                    # twice
                    #
                    if security_orders.order_type == 'amount':
                        pending_amount = pending_quantity
                        attribution_rate_amount = security_orders.attribution_rate_quantity
                        number_of_units = quotation.number_of_units( pending_amount )
                        if number_of_units < 0:
                            number_of_units = max( number_of_units, -1 * available_units )
                    else:
                        number_of_units = pending_quantity
                        attribution_rate_amount = quotation.amount( security_orders.attribution_rate_quantity )
                        pending_amount = quotation.amount( number_of_units )
                        if pending_amount < 0:
                            pending_amount = max( pending_amount, available_amount )
                        
                    for step in self.attribute_premium_to_fund(premium_schedule,
                                                               security_orders.fund_distribution, 
                                                               book_date, 
                                                               pending_amount, 
                                                               attribution_rate_amount, 
                                                               number_of_units, 
                                                               quotation, 
                                                               security_orders.associated_to, 
                                                               fund_attribution_fulfillment_type,
                                                               security_orders.within_id):
                        yield step
                else:
                    LOGGER.debug('pending quantity below investment threshold')
    
    def attribute_premium_to_fund( self, 
                                   premium_schedule,
                                   fund_distribution, 
                                   book_date, 
                                   attribution_amount, 
                                   attribution_rate_amount, 
                                   number_of_units, 
                                   quotation, 
                                   related_entry,
                                   fund_attribution_fulfillment_type,
                                   transaction_schedule_id):
        """Transaction 19
        
        @todo : multiple lines might occur on the same day
        """
        from vfinance.model.financial.work_effort import FinancialWorkEffort, FinancialAccountNotification
        from vfinance.model.bank.entry import Entry
        
        document_date = quotation.from_datetime.date()
        book_date = self.entered_book_date(document_date, book_date)
        
        account = premium_schedule.financial_account
        product = premium_schedule.product
        package = account.package
        book = product.depot_movement_book
        agreement = premium_schedule.agreed_schedule.financial_agreement
        
        associated_fulfillment_id = None
        if related_entry:
            associated_fulfillment_id = related_entry.fulfillment_id

        lines = []
        # fund
        lines.append( self.create_line( FinancialBookingAccount( 'fund', fund = fund_distribution.fund ),
                                        (attribution_amount) * -1,
                                        agreement.code,
                                        fulfillment_type = fund_attribution_fulfillment_type, 
                                        associated_fulfillment_id = associated_fulfillment_id, 
                                        within_id = transaction_schedule_id,
                                        quantity = number_of_units * 1000 ) )
        # revenue
        lines.append( self.create_line( SecurityBookingAccount( 'transfer_revenue', security = fund_distribution.fund ),
                                        attribution_rate_amount,
                                        agreement.code,
                                        fulfillment_type = fund_attribution_fulfillment_type, 
                                        associated_fulfillment_id = associated_fulfillment_id, 
                                        within_id = transaction_schedule_id,
                                        quantity = 0 ) )
        # account
        lines.append( self.create_line( FinancialBookingAccount(),
                                         attribution_amount - attribution_rate_amount,
                                         agreement.code,
                                         fulfillment_type = fund_attribution_fulfillment_type, 
                                         associated_fulfillment_id = associated_fulfillment_id, 
                                         within_id = transaction_schedule_id,
                                         quantity = 0 ) )
            
        for sales in self.create_sales( premium_schedule, book_date, document_date, 0, lines, book, 
                                        fulfillment_type = fund_attribution_fulfillment_type, 
                                        associated_fulfillment_id = associated_fulfillment_id, 
                                         within_id = transaction_schedule_id ):
            yield sales

        #
        # If this was the last investment of the premium, an investment-confirmation
        # notification should be created.
        #
        if related_entry and related_entry.fulfillment_type == 'depot_movement':
            subscriber_language = [role for role in account.roles if role.described_by=='subscriber'][0].taal
            for applied_notification in package.get_applied_notifications_at(document_date, 
                                                                             'investment-confirmation', 
                                                                             premium_schedule.period_type,
                                                                             subscriber_language = subscriber_language ):
                for recipient, _broker in account.get_notification_recipients(document_date):
                    work_effort = FinancialWorkEffort.get_open_work_effort(u'notification')
                    FinancialAccountNotification( generated_by = work_effort,
                                                  date = document_date,
                                                  balance = 0,
                                                  application_of = applied_notification,
                                                  account = account,
                                                  entry_book_date = sales.book_date,
                                                  entry_document = sales.document_number,
                                                  entry_book = sales.book,
                                                  entry_line_number = sales.last_line_number,
                                                  natuurlijke_persoon = recipient.natuurlijke_persoon,
                                                  rechtspersoon = recipient.rechtspersoon,
                                                )
        Entry.query.session.flush()
