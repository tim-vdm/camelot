# -*- coding: utf-8 -*-
import os
import datetime
import decimal
import hashlib
import json

from sqlalchemy.engine import create_engine
from sqlalchemy import orm

from camelot.core.conf import settings
from camelot.core.orm import Session
from camelot.core.sql import metadata

from vfinance.model.bank.settings import SettingsProxy
from vfinance.utils import setup_model as setup_vfinance_model
from vfinance.model.financial.package import FinancialPackage
from vfinance.model.financial.product import FinancialProduct
from vfinance.facade.financial_agreement import FinancialAgreementFacade

class DecimalEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, decimal.Decimal):
            return str(o)
        return super(DecimalEncoder, self).default(o)

<<<<<<< mine
def calculate_proposal(proposal):
    """:raises: `KeyError` when env var DB_PATH is not set"""
=======
# DB_FILENAME = '/home/stephane/vfinance_26022015/src/packages.db'
DB_FILENAME = '/home/www/staging-patronale-life.mgx.io/src-preprod/src/packages.db'
>>>>>>> theirs

<<<<<<< mine
    settings.append(SettingsProxy(None))

    # db_filename = '/home/stephane/vfinance_26022015/src/packages.db'
    # db_filename = '/home/www/staging-patronale-life.mgx.io/src-preprod/src/packages.db'
    db_filename = os.environ['DB_PATH']

    engine = create_engine('sqlite:///' + db_filename)

    metadata.bind = engine
=======
def fill_financial_agreement_facade(session, proposal):
    package = session.query(FinancialPackage).get(long(proposal['package_id']))
>>>>>>> theirs

    if not package:
        raise Exception("This package does not exist")

    facade = FinancialAgreementFacade()

    # facade.agreement_date = datetime.date(2015, 3, 2)
    facade.agreement_date = datetime.date(**proposal['agreement_date'])
    # facade.from_date = datetime.date(2015, 3, 1)
    facade.from_date = datetime.date(**proposal['from_date'])

    facade.package = package

    facade.insured_party__1__birthdate = datetime.date(
        **proposal['insured_party__1__birthdate']
    )
    # facade.insured_party__1__birthdate = datetime.date(1980, 1, 1)
    facade.insured_party__1__sex = proposal['insured_party__1__sex']
    # facade.insured_party__1__sex = 'M'

    facade.premium_schedule__1__product = package.available_products[0].product
    # from nose.tools import set_trace
    # set_trace()
    # facade.premium_schedule__1__premium_fee_1 = D(100)
    facade.premium_schedule__1__premium_fee_1 = \
        proposal['premium_schedule__1__premium_fee_1']

    product_2_id = proposal['premium_schedule__2__product_id']
    if isinstance(product_2_id, (int, long)):
        product = session.query(FinancialProduct).get(product_2_id)
        if not product:
            raise Exception("The premium_schedule__2__product_id does not exist")

        facade.premium_schedule__2__product = product


    # facade.duration = 5*12
    facade.duration = proposal['duration']

    # facade.premium_schedules_coverage_limit = D('150000')
    facade.premium_schedules_coverage_limit = \
        proposal['premium_schedules_coverage_limit']
    # facade.premium_schedules_payment_duration = 5*12
    facade.premium_schedules_payment_duration = \
        proposal['premium_schedules_payment_duration']
    # facade.premium_schedules_coverage_level_type = 'fixed_amount'
    facade.premium_schedule__1__coverage_level_type = \
        proposal['premium_schedule__1__coverage_level_type']
    facade.premium_schedule__2__coverage_level_type = \
        proposal['premium_schedule__2__coverage_level_type']
    # facade.premium_schedules_premium_rate_1 = D(20)
    facade.premium_schedules_premium_rate_1 = \
        proposal['premium_schedules_premium_rate_1']
    # facade.premium_schedules_period_type = 'single'
    facade.premium_schedules_period_type = \
        proposal['premium_schedules_period_type']

    facade.code = "000"

    return facade

def calculate_proposal(proposal):

    settings.append(SettingsProxy(None))

    db_filename = DB_FILENAME

    engine = create_engine('sqlite:///'+db_filename)

    metadata.bind = engine

    setup_vfinance_model(update=False, templates=False)

    session = Session()
    facade = fill_financial_agreement_facade(session, proposal)

    facade.update_premium()

    orm.object_session(facade).flush()

    amount1 = str(facade.premium_schedule__1__amount)
    amount2 = str(facade.premium_schedule__2__amount) \
        if facade.premium_schedule__2__amount else None

    return {
        'premium_schedule__1__amount': amount1,
        'premium_schedule__2__amount': amount2,
    }


def create_agreement_code(proposal):
    settings.append(SettingsProxy(None))

    db_filename = DB_FILENAME

    engine = create_engine('sqlite:///'+db_filename)

    metadata.bind = engine

    setup_vfinance_model(update=False, templates=False)

    session = Session()

    facade = fill_financial_agreement_facade(session, proposal)

    facade.code = next_code = FinancialAgreementFacade.next_agreement_code(session)

    facade.update_premium()

    orm.object_session(facade).flush()

    amount1 = str(facade.premium_schedule__1__amount)
    amount2 = str(facade.premium_schedule__2__amount) \
        if facade.premium_schedule__2__amount else None


    values = {
        'premium_schedule__1__amount': amount1,
        'premium_schedule__2__amount': amount2,
        'code': next_code,
    }

    use_for_signature = {
        'proposal': proposal,
        'values': values,
    }

    dump = json.dumps(
        use_for_signature,
        cls=DecimalEncoder
    )

    signature = hashlib.sha256(dump).hexdigest()

    values['signature'] = signature
    return values